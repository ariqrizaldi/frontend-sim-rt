{"version":3,"file":"js/login-legacy.15a2097e.js","mappings":"gVAcMA,GAAQC,EAAAA,EAAAA,MAERC,GAAWC,EAAAA,EAAAA,KAAS,kBAAMH,EAAMI,MAAMF,YAEtCG,GAAaF,EAAAA,EAAAA,KAAS,WAC1B,OAAQG,EAAMC,IACZ,IAAK,QACH,OAAOL,EAASM,MAAQC,EAAAA,GAAqBC,EAAAA,GAC/C,IAAK,QACH,OAAOR,EAASM,MAAQG,EAAAA,GAAqBC,EAAAA,GAGjD,MAAO,M,kTCvBT,MAAMC,EAAc,EAEpB,S,4RCFA,MAAMA,EAAc,EAEpB,S,6hBCYA,IAAMb,GAAQC,EAAAA,EAAAA,MAERa,GAAQC,EAAAA,EAAAA,IAAc,CAC1BC,SAAU,MACVC,SAAU,OAGZC,EAAAA,EAAAA,KAAU,WAERC,EAAGX,MAAMY,gBAEXC,EAAAA,EAAAA,KAAc,WACRC,EAASd,OACXe,EAAOC,IAAI,MAIf,IAAMC,GAAOC,EAAAA,EAAAA,IAAS,CACpBC,KAAM,GACNC,SAAU,KAENN,GAAWnB,EAAAA,EAAAA,KAAS,kBAAMH,EAAMI,MAAMyB,KAAKC,OAAOR,YAClDS,GAAQ5B,EAAAA,EAAAA,KAAS,WACrB,MAAO,CACLwB,KAAM,CAAEK,SAAUC,EAAAA,GAAAA,YAAoB,aAAcD,EAAAA,KACpDJ,SAAU,CAAEI,SAAUC,EAAAA,GAAAA,YAAoB,cAAeD,EAAAA,SAIvDb,GAAKe,EAAAA,EAAAA,IAAYH,EAAON,GAExBF,GAASY,EAAAA,EAAAA,MAETC,GAAYC,EAAAA,EAAAA,KAAI,GAEhBC,EAAS,WACb,GAAKnB,EAAGX,MAAM+B,OAYPzB,EAAM0B,MAAM,iCAZG,CACpB,IAAMC,EAAO,CACXd,KAAMF,EAAKE,KACXC,SAAUH,EAAKG,UAEjB5B,EAAM0C,SAAS,aAAcD,GAAME,MACjC,SAACF,GACC3B,EAAM8B,QAAQ,gBACdrB,EAAOsB,KAAK,eACX,SAACL,GACF1B,EAAM0B,MAAM,iBAAmBA,EAAMM,c,87CC5D7C,MAAMjC,EAAc,EAEpB","sources":["webpack://sim-rt/./src/components/FullScreenSection.vue","webpack://sim-rt/./src/components/FullScreenSection.vue?ecd1","webpack://sim-rt/./src/views/Home.vue","webpack://sim-rt/./src/views/Login.vue","webpack://sim-rt/./src/views/Login.vue?240b"],"sourcesContent":["<script setup>\nimport { computed } from 'vue'\nimport { useStore } from 'vuex'\nimport { sectionBgLogin, sectionBgLoginDark, sectionBgError, sectionBgErrorDark } from '@/colors'\nimport MainSection from '@/components/MainSection.vue'\n\nconst props = defineProps({\n  bg: {\n    type: String,\n    required: true,\n    validator: value => ['login', 'error'].includes(value)\n  }\n})\n\nconst store = useStore()\n\nconst darkMode = computed(() => store.state.darkMode)\n\nconst colorClass = computed(() => {\n  switch (props.bg) {\n    case 'login':\n      return darkMode.value ? sectionBgLoginDark : sectionBgLogin\n    case 'error':\n      return darkMode.value ? sectionBgErrorDark : sectionBgError\n  }\n\n  return ''\n})\n</script>\n\n<template>\n  <main-section\n    class=\"flex h-screen items-center justify-center\"\n    :class=\"colorClass\"\n  >\n    <slot\n      card-class=\"w-11/12 md:w-7/12 lg:w-6/12 xl:w-4/12 shadow-2xl\"\n      card-rounded=\"rounded-lg\"\n    />\n  </main-section>\n</template>\n","import script from \"./FullScreenSection.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./FullScreenSection.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./Home.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Home.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { ref, reactive, onMounted, computed, onBeforeMount } from 'vue'\nimport { useStore } from 'vuex'\nimport useValidate from '@vuelidate/core'\nimport { createToaster } from '@meforma/vue-toaster'\nimport { required, helpers } from '@vuelidate/validators'\nimport { useRouter } from 'vue-router'\nimport { mdiAccount, mdiEyeOff, mdiEye } from '@mdi/js'\nimport FullScreenSection from '@/components/FullScreenSection.vue'\nimport CardComponent from '@/components/CardComponent.vue'\nimport CheckRadioPicker from '@/components/CheckRadioPicker.vue'\nimport Field from '@/components/Field.vue'\nimport Control from '@/components/Control.vue'\nimport Divider from '@/components/Divider.vue'\nimport JbButton from '@/components/JbButton.vue'\nimport JbButtons from '@/components/JbButtons.vue'\n\nconst store = useStore()\n\nconst toast = createToaster({\n  position: 'top',\n  duration: 2000\n})\n\nonMounted(() => {\n  // dispatch the fetch action which commits a mutation 'SET_ITEMS' to update\n  v$.value.$validate()\n})\nonBeforeMount(() => {\n  if (loggedIn.value) {\n    router.go(-1)\n  }\n})\n\nconst form = reactive({\n  nama: '',\n  password: ''\n})\nconst loggedIn = computed(() => store.state.auth.status.loggedIn)\nconst rules = computed(() => {\n  return {\n    nama: { required: helpers.withMessage('Wajib disi', required) },\n    password: { required: helpers.withMessage('Wajib diisi', required) }\n  }\n})\n\nconst v$ = useValidate(rules, form)\n\nconst router = useRouter()\n\nconst isVisible = ref(false)\n\nconst submit = () => {\n  if (!v$.value.$error) {\n    const data = {\n      nama: form.nama,\n      password: form.password\n    }\n    store.dispatch('auth/login', data).then(\n      (data) => {\n        toast.success('Sukses Login')\n        router.push('/profile')\n      }, (error) => {\n        toast.error('Login gagal ! ' + error.message)\n      })\n  } else toast.error('Isi form sesuai ketentuan')\n}\n</script>\n\n<template>\n  <full-screen-section\n    v-slot=\"{ cardClass, cardRounded }\"\n    bg=\"login\"\n  >\n    <card-component\n      :class=\"cardClass\"\n      :rounded=\"cardRounded\"\n      form\n      @submit.prevent=\"submit\"\n    >\n      <div class=\"flex items-center justify-center\">\n        <p class=\"text-xl lg:text-2xl font-bold \">\n          SIM-RT BPS RI\n        </p>\n      </div>\n      <div class=\"flex items-center justify-center\">\n        <p class=\"text-lg lg:text-xl font-medium mb-4 \">\n          Login\n        </p>\n      </div>\n      <field\n        label=\"Nama\"\n        help=\"Masukkan nama anda\"\n        :error=\"v$.nama.$error\"\n        :message=\"v$.nama.$errors[0]\"\n      >\n        <control\n          v-model=\"form.nama\"\n          :icon=\"mdiAccount\"\n          name=\"nama\"\n          autocomplete=\"nama\"\n        />\n      </field>\n\n      <field\n        label=\"Password\"\n        help=\"Masukkan password anda\"\n        :error=\"v$.password.$error\"\n        :message=\"v$.password.$errors[0]\"\n      >\n        <control\n          v-model=\"form.password\"\n          :icon=\"isVisible ? mdiEye : mdiEyeOff\"\n          :type=\"isVisible ? 'text' : 'password'\"\n          name=\"password\"\n          autocomplete=\"current-password\"\n        />\n      </field>\n      <check-radio-picker\n        name=\"Lihat Password\"\n        :options=\"{ value: 'Lihat Password' }\"\n        @click-visible=\"isVisible = !isVisible\"\n      />\n\n      <divider />\n\n      <jb-buttons>\n        <jb-button\n          type=\"submit\"\n          color=\"info\"\n          label=\"Login\"\n        />\n      </jb-buttons>\n    </card-component>\n  </full-screen-section>\n</template>\n","import script from \"./Login.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Login.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["store","useStore","darkMode","computed","state","colorClass","props","bg","value","sectionBgLoginDark","sectionBgLogin","sectionBgErrorDark","sectionBgError","__exports__","toast","createToaster","position","duration","onMounted","v$","$validate","onBeforeMount","loggedIn","router","go","form","reactive","nama","password","auth","status","rules","required","helpers","useValidate","useRouter","isVisible","ref","submit","$error","error","data","dispatch","then","success","push","message"],"sourceRoot":""}